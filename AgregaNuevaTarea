using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using System.Data.SqlClient;



namespace Calidad
{
    public partial class FrmAgregaTest : Form


    {

        public string pStringConex;
        private bool blnHidden;
        private String Directorio;
        
        private int pintniveles = 4;

        private string Codproceso;
        public ConexionBD pResultado;
        public Calendar pCalendario;

        private string pstrTitulo = "Mantenedor de Test ";

        public FrmAgregaTest()
        {
            pResultado = new ConexionBD();
            pResultado.StrCONADO = pStringConex;
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //TextBox prueba = new TextBox();

            txtCodModulo.LostFocus +=new EventHandler(txtCodModulo_LostFocus);
            txtcodproceso.LostFocus +=new EventHandler(txtCodProceso_LostFocus);
            CmdBuscar1.GotFocus += new EventHandler(CmdBuscar1_GotFocus);
            CmdAgrega.Enabled = false;
            txtRutaTest.Enabled = false;
            //txtCodModulo.Focus();
            Btn_Extraer.Enabled = false;
            this.Text = pstrTitulo;
            pResultado.StrCONADO = pStringConex;
            grcreanuevo.Enabled = false;
            grTestExistente.Enabled = true;

        }

        void CmdBuscar1_GotFocus(object sender, EventArgs e)
        {
            if (txtCodModulo.Text == "")
            {
                txtCodModulo.Focus();
                MessageBox.Show("Sr. Usuario:" + "\n" + "Debe ingresar el Sistema", this.Text);
            }
            
        }

        private void txtCodModulo_LostFocus(object sender, EventArgs e)
        {
            blnHidden = true;
            CmdBuscar0_Click(sender, e);
            blnHidden = false;
        }

        private void txtCodProceso_LostFocus(object sender, EventArgs e)
        {
            blnHidden = true;
            CmdBuscar1_Click(sender, e);
            blnHidden = false;
        }



        private void txtCodModulo_TextChanged(object sender, EventArgs e)
        {
            txtRutaTest.Text = "";
            txtcodproceso.Text = "";
            txtdesproceso.Text = "";
        }

        private void Btn_Extraer_Click(object sender, EventArgs e)
        {
            string mivar;
            string mivar1;
            string mivar2;
            string pstrSql;


            string Nomproceso;
            
            bool pblnRutaCorrecta = false;
            bool pblntestExiste = false;

            int CodprocesoNum;
            int largoCodProceso;

            string CodprocesoTBL;
            int CodprocesoNumTBL;

            if (txtRutaTest.Text != "")
            {
                mivar = this.txtRutaTest.Text + "\\";

                ArrayList list = new ArrayList();

              
                GrillaRuta.DataSource = "";
                int pintvalidaniveles = 0;
                int largo;
                largo = mivar.Length;

                mivar1 = mivar.Substring(3, largo - 3);

                int pos;
                if (pResultado.Conectado)
                {
                }
                else
                {
                pResultado.Conectar(pStringConex);
                }
                int n = 1;
                while (n <= largo)
                {
                    pos = mivar1.IndexOf("\\");


                    largo = mivar1.Length;

                    mivar2 = mivar1.Substring(0, pos);
                    mivar1 = mivar1.Substring(pos + 1, largo - (pos + 1));


                    pintvalidaniveles = pintvalidaniveles + 1;
                    if (pintvalidaniveles == 2)
                    {
                        if (mivar2 == "Test")
                        {
                            pblnRutaCorrecta = true;
                        }
                    }

                    if (pintvalidaniveles == 3)
                    {
                        pstrSql = "Select descripcion from [DBO].[RB_TblProcesos] where Descripcion = '" + mivar2 + "'  and Cod_Modulo = '" + txtCodModulo.Text + "'";
                        Nomproceso = pResultado.RetornaunCampoConSQL(pstrSql);
                        if (Nomproceso == null || Nomproceso == "")
                        {
                            pstrSql = "Select MAX(cod_proceso) as Cod_proceso FROM [DBO].[RB_TblProcesos] WHERE Cod_Modulo = '" + txtCodModulo.Text + "'";
                            Codproceso = pResultado.RetornaunCampoConSQL(pstrSql);

                            if (Codproceso == null || Codproceso == "")
                            {
                                CodprocesoNum = 1;
                            }
                            else
                            {
                                CodprocesoNum = Convert.ToInt32(Codproceso);
                                CodprocesoNum = CodprocesoNum + 1;
                            }
                            Codproceso = Convert.ToString(CodprocesoNum);


                            largoCodProceso = Codproceso.Length;
                            if (largoCodProceso == 1)
                            {
                                Codproceso = "00" + Codproceso;
                            }

                            if (largoCodProceso == 2)
                            {
                                Codproceso = "0" + Codproceso;
                            }
                            
                            list.Add(new  AgregaTest(Codproceso, "Proceso", mivar2));
                        }
                        else
                        {
                            pstrSql = "Select cod_proceso FROM [DBO].[RB_TblProcesos] where Descripcion = '" + mivar2 + "'  and Cod_Modulo = '" + txtCodModulo.Text + "'";
                            Codproceso = pResultado.RetornaunCampoConSQL(pstrSql);
                        }
                    }

                    if (pintvalidaniveles == 4)
                    {
                        pstrSql = "Select descripcion from [DBO].[RB_TblTestxProcesos] where Descripcion = '" + mivar2 + "'  and Cod_Modulo = '" + txtCodModulo.Text + "'";
                        pstrSql = pstrSql + " and Cod_tblCodproceso = '" + Codproceso + "'";

                        Nomproceso = pResultado.RetornaunCampoConSQL(pstrSql);
                        if (Nomproceso == null || Nomproceso == "")
                        {
                            pstrSql = "Select MAX(cod_proceso) as Cod_proceso FROM [DBO].[RB_TblTestxProcesos] WHERE Cod_Modulo = '" + txtCodModulo.Text + "'";
                            if (txtcodproceso.Text == "")
                            {
                                pstrSql = pstrSql + "";

                                if (Codproceso == "")
                                { }
                                else
                                {
                                    pstrSql = pstrSql + " and Cod_tblCodproceso = '" + Codproceso + "'";
                                }

                            }
                            else
                            {
                                pstrSql = pstrSql + " and Cod_tblCodproceso = '" + txtcodproceso.Text + "'";
                            }


                            CodprocesoTBL = pResultado.RetornaunCampoConSQL(pstrSql);

                            if (CodprocesoTBL == null || CodprocesoTBL == "")
                            {
                                CodprocesoNumTBL = 1;
                            }
                            else
                            {
                                CodprocesoNumTBL = Convert.ToInt32(CodprocesoTBL);
                                CodprocesoNumTBL = CodprocesoNumTBL + 1;
                            }
                            CodprocesoTBL = Convert.ToString(CodprocesoNumTBL);


                            largoCodProceso = CodprocesoTBL.Length;
                            if (largoCodProceso == 1)
                            {
                                CodprocesoTBL = "00" + CodprocesoTBL;
                            }

                            if (largoCodProceso == 2)
                            {
                                CodprocesoTBL = "0" + CodprocesoTBL;
                            }

                            list.Add(new AgregaTest(CodprocesoTBL, "Test", mivar2));
                        }
                        else
                        {
                            pstrSql = "Select cod_proceso FROM [DBO].[RB_TblTestxProcesos] where Descripcion = '" + mivar2 + "'  and Cod_Modulo = '" + txtCodModulo.Text + "'";
                            CodprocesoTBL = pResultado.RetornaunCampoConSQL(pstrSql);
                            list.Add(new AgregaTest(CodprocesoTBL, "Test", mivar2));
                            pblntestExiste = true;
                        }
                    }

                    largo = mivar1.Length;


                    n++;

                }
                pResultado.Desconectar();
                if (pintniveles != pintvalidaniveles)
                {
                    MessageBox.Show("Sr.Usuario :" + "\n" + "Se requieren 4 niveles de subcarpetas para capturar un nuevo Test, verifique!", this.Text);
                }
                else
                {
                    
                    if (list.Count == 0)
                    {
                        MessageBox.Show("Sr.Usuario :" + "\n" + "El Test ya existe, verifique!", this.Text);
                        CmdElimina.Enabled = true;
                    }
                    else
                    {
                        if (pblnRutaCorrecta)
                        {
                            GrillaRuta.DataSource = list;
                            InicializaGrilla();
                            if (pblntestExiste)
                            {
                                MessageBox.Show("Sr.Usuario :" + "\n" + "El Test existe!", this.Text);
                                this.Text = pstrTitulo + " - (Modifica)";
                                CmdElimina.Enabled = true;
                                CmdAgrega.Enabled = false;
                                txtObjetivo.Enabled = false;
                                txtnumot.Enabled = false;

                            }
                            else
                            {
                                this.Text = pstrTitulo + " - (Agrega)";
                                CmdElimina.Enabled = false;
                                CmdAgrega.Enabled = true;
                                txtObjetivo.Enabled = true;
                                txtnumot.Enabled = true;

                            }
                        }
                        else
                        {
                            MessageBox.Show("Sr.Usuario :" + "\n" + "El Directorio seleccionado no corresponde a la ruta donde se encuentras los Test, verifique!", this.Text);
                        }
                    }
                }
            }
            else
            {
                MessageBox.Show("Sr.Usuario :" + "\n" + "Ingrese los datos faltantes!", this.Text);
            }
           // mivar1 = "\\\\galileo\\ppruebas" + mivar.Substring(2, largo - 2);
        }


        private static string pFunc_BuscaString(string item)
        {

            // try to find a tag at the start of the line using StartsWith
            if (item.Trim().StartsWith("\\"))
            {

                // now search for the closing tag...
                int lastLocation = item.IndexOf("\\");

                // remove the identified section, if it is a valid region
                if (lastLocation >= 0)
                    item = item.Substring(lastLocation + 1);
            }

            return item;
        }

        private void cmdSalir_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void chkProcesoExiste_CheckedChanged(object sender, EventArgs e)
        {
            if (chkProcesoExiste.Checked)
            {
                groupProceso.Enabled = true;
            }
            else
            {
                groupProceso.Enabled = false;
                chkProcesoExiste.Enabled = true;
            }
            txtcodproceso.Text = "";
            txtdesproceso.Text = "";
            GrillaRuta.DataSource = "";
            txtRutaTest.Text = "";
            Btn_Extraer.Enabled = false;

        }

     
        private void InicializaGrilla()
        {
            // Automatically resize the visible rows.
            GrillaRuta.AutoSizeRowsMode =
                DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders;

            // Set the DataGridView control's border.
            GrillaRuta.BorderStyle = BorderStyle.Fixed3D;

            // Put the cells in edit mode when user enters them.
            GrillaRuta.EditMode = DataGridViewEditMode.EditOnEnter;
           // GrillaRuta.Columns[0].HeaderText = "Módulo";
           // GrillaRuta.Columns[1].HeaderText = "Descripción";

            GrillaRuta.Columns[0].Width = 70; //AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells;
            GrillaRuta.Columns[1].Width = 70; //AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells;
            GrillaRuta.Columns[2].Width = 250; //AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells;
        }

        private void txtRutaTest_TextChanged(object sender, EventArgs e)
        {
            if (txtRutaTest.Text == "")
            {
                Btn_Extraer.Enabled = false;
                CmdAgrega.Enabled = false;
            }
        }

        private void CmdAgrega_Click(object sender, EventArgs e)
        {
            StringBuilder errorMessages = new StringBuilder();
            try
            {
                //para la tabla RB_tbltestXproceso
                string codtblcodproceso;
                string nomproceso;

                //para la tabla RB_tblproceso
                string xcodproceso;
                string xnomproceso;    
                string pStrSQL;

                if (GrillaRuta.RowCount == 1)
                {

                    codtblcodproceso = Convert.ToString(GrillaRuta.Rows[0].Cells[0].Value);
                    nomproceso = Convert.ToString(GrillaRuta.Rows[0].Cells[2].Value);
                    pStrSQL = "INSERT INTO [DBO].[RB_TblTestxProcesos] (Cod_modulo,Cod_proceso,cod_tblcodproceso,descripcion,estadotest,Objetivotest, AzureID,fecha) VALUES (";
                    pStrSQL = pStrSQL + "'" + txtCodModulo.Text.ToUpper() + "',";
                    pStrSQL = pStrSQL + "'" + codtblcodproceso  + "',";
                    pStrSQL = pStrSQL + "'" + Codproceso + "',";
                    pStrSQL = pStrSQL + "'" + nomproceso + "',";
                    pStrSQL = pStrSQL + "1,";
                    pStrSQL = pStrSQL + "'" + txtObjetivo.Text.Replace("'", "") + "',";
                    pStrSQL = pStrSQL + "'" + txtAzureID.Text.Replace("'", "") + "',";
                    pStrSQL = pStrSQL + "convert(datetime,'" + fecha.Text + "',103)";
                    pStrSQL = pStrSQL + ")";

                    if (pResultado.Conectado)
                    {
                        pResultado.EjecutaSQL(pStrSQL);
                    }
                    else
                    {
                        pResultado.Conectar(pStringConex);
                        pResultado.EjecutaSQL(pStrSQL);
                    }


                }
                else
                {
                    int iIndice;
                    for (iIndice = 0; iIndice < (GrillaRuta.RowCount); iIndice++)
                    {
                        if (iIndice == 0)
                        {
                            xcodproceso = Convert.ToString(GrillaRuta.Rows[0].Cells[0].Value);
                            xnomproceso = Convert.ToString(GrillaRuta.Rows[0].Cells[2].Value);
                            pStrSQL = "INSERT INTO [DBO].[RB_TblProcesos] (Cod_Proceso,Cod_Modulo, Descripcion,NumOT) VALUES (";
                            pStrSQL = pStrSQL + "'" + xcodproceso + "',";
                            pStrSQL = pStrSQL + "'" + txtCodModulo.Text.ToUpper() + "',";
                            pStrSQL = pStrSQL + "'" + xnomproceso + "',";
                            pStrSQL = pStrSQL + "'" + txtnumot.Text.Replace("'", "") + "')";

                        }
                        else
                        {

                            codtblcodproceso = Convert.ToString(GrillaRuta.Rows[1].Cells[0].Value);
                            nomproceso = Convert.ToString(GrillaRuta.Rows[1].Cells[2].Value);
                            pStrSQL = "INSERT INTO [DBO].[RB_TblTestxProcesos] (Cod_modulo,Cod_proceso,cod_tblcodproceso,descripcion,estadotest,Objetivotest, AzureID,fecha) VALUES (";
                            pStrSQL = pStrSQL + "'" + txtCodModulo.Text.ToUpper() + "',";
                            pStrSQL = pStrSQL + "'" + codtblcodproceso  + "',";
                            pStrSQL = pStrSQL + "'" + Codproceso + "',";
                            pStrSQL = pStrSQL + "'" + nomproceso + "',";
                            pStrSQL = pStrSQL + "1,";
                            pStrSQL = pStrSQL + "'" + txtObjetivo.Text.Replace("'", "") + "',";
                            pStrSQL = pStrSQL + "'" + txtAzureID.Text.Replace("'", "") + "',";
                            pStrSQL = pStrSQL + "convert(datetime,'" + fecha.Text + "',103)";
                            pStrSQL = pStrSQL + ")";

                        }

                        if (pResultado.Conectado)
                        {
                            pResultado.EjecutaSQL(pStrSQL);
                        }
                        else
                        {
                            pResultado.Conectar(pStringConex);
                            pResultado.EjecutaSQL(pStrSQL);
                        }


                    }
                    txtCodModulo.Text = "";
                    txtdesmodulo.Text = "";
                    txtcodproceso.Text = "";
                    txtdesproceso.Text = "";
                }
                MessageBox.Show("Sr. Usuario :" + "\n" + "Test agregado correctamente!", this.Text);
                txtRutaTest.Text = "";
                txtObjetivo.Text = "";
                txtAzureID.Text = "";
                txtnumot.Text = "";
                GrillaRuta.DataSource = "";
                CmdAgrega.Enabled = false;
                this.Text = pstrTitulo;


            }
            catch (SqlException ex)
            {
                for (int i = 0; i < ex.Errors.Count; i++)
                {
                    errorMessages.Append("Index #" + i + "\n" +
                   "Mensaje         : " + ex.Errors[i].Message + "\n" +
                   "Número de Línea : " + ex.Errors[i].LineNumber + "\n" +
                   "Origen          : " + ex.Errors[i].Source + "\n" +
                   "Procedimiento   : " + ex.Errors[i].Procedure + "\n");
                    MessageBox.Show(errorMessages.ToString(), "Detección de Anomalía");
                }
            }

        }

        private void CmdElimina_Click(object sender, EventArgs e)
        {
            var result = MessageBox.Show("Sr.Usuario :" + "\n" + "¿Desea eliminar sólo el TEST?" + "\n" , this.Text,
                 MessageBoxButtons.YesNo,
                 MessageBoxIcon.Question);

            if (result == DialogResult.No)
            {

                var result1 = MessageBox.Show("Sr.Usuario :" + "\n" + "¿Desea eliminar el PROCESO y TESTs dependientes?" + "\n" , this.Text,
                     MessageBoxButtons.YesNo,
                     MessageBoxIcon.Question);

                if (result1 == DialogResult.Yes)
                {
                    //ELIMINAR
                    //SELECT * from [DBO].[RB_TblTestxProcesos] where Cod_modulo  ='HW' AND COD_TBLCODPROCESO = '012'
                    //AND  Descripcion = 'Estadisticas De helpDesk'
                    //SELECT * from [DBO].[RB_TblTestxProcesos] 
                    //where Cod_modulo  ='HW' AND Cod_tblCodproceso = '012' AND Cod_proceso= '007' 


                    FrmPassword dbform = new FrmPassword();
                    dbform.pStringConex = pStringConex;
                    dbform.ptitulo = this.Text;
                    dbform.pStringElimina = "Delete from [DBO].[RB_TblTestxProcesos] where Cod_modulo  ='" + txtCodModulo.Text + "' AND COD_TBLCODPROCESO = '" + txtcodproceso.Text + "'";
                    dbform.pStringElimina2 = "Delete from [DBO].[RB_TblProcesos] where Cod_modulo  ='" + txtCodModulo.Text + "' AND cod_proceso = '" + txtcodproceso.Text + "'";
                    dbform.ShowDialog();
                    MessageBox.Show("Sr. Usuario: " + "\n"+ "PROCESO Y TESTs eliminados correctamente",this.Text);
                }

            }
            else
            {
                FrmPassword dbform = new FrmPassword();
                dbform.pStringConex = pStringConex;
                dbform.ptitulo = this.Text;
                dbform.pStringElimina = "Delete from [DBO].[RB_TblTestxProcesos] where Cod_modulo  ='" + txtCodModulo.Text + "' AND COD_TBLCODPROCESO = '" + txtcodproceso.Text + "' AND cod_proceso = '" + Convert.ToString(GrillaRuta.Rows[0].Cells[0].Value) + "'";
                dbform.ShowDialog();
                //if (dbform.pblnCancelo)
                MessageBox.Show("Sr. Usuario: " + "\n" + "TEST eliminado correctamente", this.Text);

            }


            GrillaRuta.DataSource = "";
            txtRutaTest.Text = "";
            txtCodModulo.Text = "";
            txtdesmodulo.Text = "";
            txtcodproceso.Text = "";
            txtdesproceso.Text = "";

            Btn_Extraer.Enabled = false;
            CmdAgrega.Enabled =false;
            CmdElimina.Enabled=false;
            this.Text = pstrTitulo;

        }

        private void btn_RutaTest_Click(object sender, EventArgs e)
        {
            bool blnAnaliza = false;

            //Validar los datos
            if (txtCodModulo.Text == "")
            {
                MessageBox.Show("Sr. Usuario:" + "\n" + "Debe ingresar el Sistema", this.Text);
                blnAnaliza = false;
            }
            else
            { blnAnaliza = true; }

            if (chkProcesoExiste.Checked)
            {
                if (txtcodproceso.Text == "")
                {
                    MessageBox.Show("Sr. Usuario:" + "\n" + "Debe ingresar el Proceso", this.Text);
                    blnAnaliza = false;
                }
                else
                { blnAnaliza = true; }
            }



            if (blnAnaliza)
            {
                //Limpia Grilla
                ArrayList list = new ArrayList();
                GrillaRuta.DataSource = list;



                Directorio = "V:\\" + txtCodModulo.Text + "\\Test\\";
                if (chkProcesoExiste.Checked)
                {
                    if (txtdesproceso.Text != "")
                    {
                        Directorio = Directorio + txtdesproceso.Text + "\\";
                    }
                }
                FolderDialog.Description = "Seleccionar Ruta del Test";
                FolderDialog.SelectedPath = Directorio;
                FolderDialog.ShowNewFolderButton = false;
                FolderDialog.ShowDialog();
                txtRutaTest.Text = FolderDialog.SelectedPath;
                Btn_Extraer.Enabled = true;
            }
        }



        private void CmdBuscar0_Click(object sender, EventArgs e)
        {
            Frm_buscador dbfForm1 = new Frm_buscador();
            dbfForm1.pStringConex = pStringConex;
            //dbfForm1.pStrSQLTest = "SELECT Cod_Modulo as Codigo, Descripcion  as Descripcion from [DBO].[rb_tblModulos]";
            dbfForm1.nomTabla = "rb_tblModulos";
            dbfForm1.Codigo = "Cod_Modulo";
            dbfForm1.descripcion = "Descripcion";
            dbfForm1.blnIndicaOrdenASC = true;
            dbfForm1.gcodigoVALOR = txtCodModulo.Text ;
            dbfForm1.gdescriVALOR = txtdesmodulo.Text;

            if (blnHidden)
            {
                dbfForm1.pfbln_buscar(txtCodModulo.Text);
            }
            else
            {
                dbfForm1.ShowDialog();
            }
            txtCodModulo.Text = dbfForm1.gcodigoVALOR;
            txtdesmodulo.Text = dbfForm1.gdescriVALOR;

        }

        private void CmdBuscar1_Click(object sender, EventArgs e)
        {
            Frm_buscador dbfForm1 = new Frm_buscador();
            dbfForm1.pStringConex = pStringConex;
            //dbfForm1.pStrSQLTest = "SELECT Cod_Modulo as Codigo, Descripcion  as Descripcion from [DBO].[rb_tblModulos]";
            dbfForm1.nomTabla = "rb_tblProcesos";
            dbfForm1.Codigo = "Cod_Proceso";
            dbfForm1.descripcion = "Descripcion";
            dbfForm1.pstrCondAnexa = " cod_modulo = '" + txtCodModulo.Text.ToUpper() + "'";
            dbfForm1.gcodigoVALOR = txtcodproceso.Text.ToUpper();
            dbfForm1.gdescriVALOR = txtdesproceso.Text;

            dbfForm1.blnIndicaOrdenASC = true;
            if (blnHidden)
            {
                dbfForm1.pfbln_buscar(txtCodModulo.Text);
            }
            else
            {
                dbfForm1.ShowDialog();
            }
            if (txtcodproceso.Text != dbfForm1.Codigo)
            {
                txtRutaTest.Text = "";
                GrillaRuta.DataSource = "";
            }
            txtcodproceso.Text = dbfForm1.gcodigoVALOR;
            txtdesproceso.Text = dbfForm1.gdescriVALOR;
        }

        private void txtCodModulo_TextChanged_1(object sender, EventArgs e)
        {
            txtcodproceso.Text = "";
            txtdesproceso.Text = "";
        }

        private void OptTestExistente_CheckedChanged(object sender, EventArgs e)
        {
            grcreanuevo.Enabled = false;
            grTestExistente.Enabled = true;
        }

        private void OptCarpetaExiste_CheckedChanged(object sender, EventArgs e)
        {
            grcreanuevo.Enabled = true;
            grTestExistente.Enabled = false;
        }

        private void CmdCrear_Click(object sender, EventArgs e)
        {
            if (txtCodModulo.Text != "")
            {
                Directorio = "V:\\" + txtCodModulo.Text + "\\Test\\";
                if (txtnombretest.Text != "")
                {
                    Directorio = Directorio + txtnombretest.Text + "\\";
                    //Create a new subfolder under the current active folder
                    string newPath = System.IO.Path.Combine(Directorio, "mySubDir");

                    // Create the subfolder
                    System.IO.Directory.CreateDirectory(newPath);

                }
                else
                {

                }
            }
            else
            {
                MessageBox.Show("Señor Usuario:\nEs necesario seleccionar el sistema para crear el proceso.",
                                  "Sigla Sistema", MessageBoxButtons.OK,
                                  MessageBoxIcon.Information); 
 
            }


        }


      
           

    }
}
